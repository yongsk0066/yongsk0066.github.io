---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import Comments from "@components/Comments.astro";
import Share from "@components/Share.astro";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;

const seriesPosts = (
  await getCollection("blog", ({ id }) => {
    return !id.startsWith("en/");
  })
)
  .filter(
    (_post) => _post.data.series === post.data.series && !!post.data.series
  )
  .sort((a, b) => a.data.date.valueOf() - b.data.date.valueOf());

const { Content } = await post.render();
---

<PageLayout title={post.data.title} description={post.data.description ?? ""}>
  <!--- Starts component --->
  <div id="scroll-progress" class="bg-blue-600 h-1 fixed top-0 left-0 z-50">
  </div>
  <!--- Ends component --->
  <Container>
    <div class="animate">
      <BackToPrev href="/blog"> 돌아가기 </BackToPrev>
    </div>
    <!-- series -->
    <div class="animate flex items-center gap-1.5"></div>
    <div class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(post.body)}
        </div>
      </div>
      <div class="animate text-3xl font-bold text-black dark:text-white">
        {post.data.title}
      </div>
      {
        seriesPosts.length > 1 && (
          <div class="animate text-zinc-500">
            <div class="text-base mt-8 text-zinc-600 text-bold">
              [ {post.data.series} ] 시리즈
            </div>
            <ul class="flex flex-col gap-y-2.5 my-3 border-l-2 border-zinc-300">
              {seriesPosts.map((seriesPost) => {
                const link = `/${seriesPost.collection}/${seriesPost.slug}`;
                return (
                  <li class="text-sm indent-2 underline hover:text-zinc-800">
                    <a href={link} rel="noopener noreferrer" target="_blank">
                      {seriesPost.data.title}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        )
      }
    </div>
    <article class="animate break-all hyphens-auto">
      <Content />
    </article>
    {
      seriesPosts.length > 1 && (
        <div class="animate text-zinc-500">
          <div class="text-base mt-8 text-zinc-600 text-bold">
            [ {post.data.series} ] 시리즈 더보기
          </div>
          <ul class="flex flex-col gap-y-2.5 my-3 border-l-2 border-zinc-300">
            {seriesPosts.map((seriesPost) => {
              const link = `/${seriesPost.collection}/${seriesPost.slug}`;
              return (
                <li class="text-sm indent-2 underline hover:text-zinc-800">
                  <a href={link}>{seriesPost.data.title}</a>
                </li>
              );
            })}
          </ul>
        </div>
      )
    }
    <Share />
    <Comments />
  </Container>
</PageLayout>
<!--- Starts script --->
<script type="module">
  window.addEventListener("scroll", function () {
    const scrollableHeight =
      document.documentElement.scrollHeight - window.innerHeight;
    const scrolled = window.scrollY;
    const progressBar = document.getElementById("scroll-progress");
    const progress = (scrolled / scrollableHeight) * 100;
    progressBar.style.width = progress + "%";
  });
</script>
<!--- Ends script --->
